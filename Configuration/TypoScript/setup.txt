plugin.tx_pxsemantic {
    view {
        templateRootPath >
        templateRootPaths {
            0 = {$plugin.tx_pxsemantic.view.templateRootPath}
        }
        partialRootPath >
        partialRootPaths {
            0 = {$plugin.tx_pxsemantic.view.partialRootPath}
        }
        layoutRootPath >
        layoutRootPaths {
            0 = {$plugin.tx_pxsemantic.view.layoutRootPath}
        }
    }
    persistence {
        storagePid = {$plugin.tx_pxsemantic.persistence.storagePid}
        recursive = {$plugin.tx_pxsemantic.persistence.recursive}
    }
    features {
        skipDefaultArguments = 1
    }
    settings {
        rest {
            pid = {$plugin.tx_pxsemantic.settings.rest.pid}
            typeNum = {$plugin.tx_pxsemantic.settings.rest.typeNum}
            endpoints {
                pages {
                    entity = Portrino\PxSemantic\SchemaOrg\CreativeWork
                    resource = Portrino\PxSemantic\Domain\Model\Page
                    processors {
                        0 {
                            className = Portrino\PxSemantic\Processor\PageProcessor
                        }
                    }
                }
            }
        }
        hydra {
            pid = {$plugin.tx_pxsemantic.settings.hydra.pid}
            context {
                typeNum = {$plugin.tx_pxsemantic.settings.hydra.context.typeNum}
            }
            vocabulary {
                typeNum = {$plugin.tx_pxsemantic.settings.hydra.vocabulary.typeNum}
            }
        }
    }
}
[userFunc = \Portrino\PxSemantic\Utility\ExtensionFeatureUtility::isFeatureEnabled(HydraRestApiCaching)]
    config.tx_extbase {
        objects {
            TYPO3\CMS\Extbase\Mvc\Web\Response.className = Portrino\PxSemantic\Caching\CacheableResponse
        }
    }
[global]

lib.structuredDataMarkup = USER
lib.structuredDataMarkup {
    # we have to use custom userFunc here, to enable entity id set / write from outsite
    userFunc = Portrino\PxSemantic\Core\Bootstrap->run
    extensionName = PxSemantic
    pluginName = StructuredDataMarkup
    vendorName = Portrino
    controller = Entity
    action = render
    view =< plugin.tx_pxsemantic.view
    persistence =< plugin.tx_pxsemantic.persistence
    settings {
        context = http://schema.org
        entity {
            # classname of the entity (root) which should be rendered
#            className = Portrino\PxSemantic\SchemaOrg\Thing
             # override the data attribute as you wish to change the uid of the entity you want to render
#            id = TEXT
#            id.data = field:uid
        }

        processors {
            # Processors should implement Portrino\PxSemantic\Processors\ProcessorInterface
            # Processors will be executed in order of the array keys
            # 0 {
            #    className = Portrino\PxSemantic\Processor\ExampleProcessor
            #    settings {
            #        foo = bar
            #    }
            # }
        }
    }
}

###
### HYDRA API
###
hydraApi = PAGE
hydraApi {
    typeNum = {$plugin.tx_pxsemantic.settings.rest.typeNum}
    10 = USER
    10 {
        userFunc = Portrino\PxSemantic\Core\Bootstrap->run
        extensionName = PxSemantic
        pluginName = HydraApi
        vendorName = Portrino
        controller = Api
        action = index
        view =< plugin.tx_pxsemantic.view
        persistence =< plugin.tx_pxsemantic.persistence
    }

    config {
        debug = 0
        disableAllHeaderCode = 1
        additionalHeaders = Content-type:application/ld+json
        xhtml_cleaning = 0
        admPanel = 0
        no_cache = 1
    }
}


###
### HYDRA Context API
###
hydraContextApi = PAGE
hydraContextApi {
    typeNum = {$plugin.tx_pxsemantic.settings.hydra.context.typeNum}
    10 = USER
    10 {
        userFunc = Portrino\PxSemantic\Core\Bootstrap->run
        extensionName = PxSemantic
        pluginName = HydraContext
        vendorName = Portrino
        controller = Context
        action = index
        view =< plugin.tx_pxsemantic.view
        persistence =< plugin.tx_pxsemantic.persistence
    }

    config {
        debug = 0
        disableAllHeaderCode = 1
        additionalHeaders = Content-type:application/ld+json
        xhtml_cleaning = 0
        admPanel = 0
        no_cache = 0
    }
}

###
### HYDRA Vocabulary API
###
hydraVocabularyApi = PAGE
hydraVocabularyApi {
    typeNum = {$plugin.tx_pxsemantic.settings.hydra.vocabulary.typeNum}
    10 = USER
    10 {
        userFunc = Portrino\PxSemantic\Core\Bootstrap->run
        extensionName = PxSemantic
        pluginName = HydraVocabulary
        vendorName = Portrino
        controller = Vocabulary
        action = index
        view =< plugin.tx_pxsemantic.view
        persistence =< plugin.tx_pxsemantic.persistence
    }

    config {
        debug = 0
        disableAllHeaderCode = 1
        additionalHeaders = Content-type:application/ld+json
        xhtml_cleaning = 0
        admPanel = 0
        no_cache = 0
    }
}

lib.structuredDataMarkupPageExample < lib.structuredDataMarkup
lib.structuredDataMarkupPageExample {
    settings {
        entity {
            # classname of the entity (root) which should be rendered
            className = Portrino\PxSemantic\SchemaOrg\CreativeWork
        }
        processors {
            # Processors should implement Portrino\PxSemantic\Processors\ProcessorInterface
            # Processors will be executed in order of the array keys
            0 {
                className = Portrino\PxSemantic\Processor\PageProcessor
                settings {
                    media {
                        height = 800
                        width = 800
                    }
                }
            }
        }
    }
}
# Renders static information about the corporate contact
# see here: https://developers.google.com/structured-data/customize/contact-points
# or here: https://developers.google.com/schemas/reference/types/Organization
lib.structuredDataMarkupOrganizationExample < lib.structuredDataMarkup
lib.structuredDataMarkupOrganizationExample {
    settings {
        entity {
            className = Portrino\PxSemantic\SchemaOrg\Organization
        }
        processors {
            # processor to set properties of an entity via TypoScript
            0 {
                className = Portrino\PxSemantic\Processor\TypoScriptProcessor
                settings {
                    # for string values you do not have to use TEXT datatype, you can just write "key = value"
                    # US, GB, DE
                    areaServed = DE

                    contactPoint {
                        # "customer support", "technical support", "billing support", ...
                        contactType = customer support
                        telephone = +49-123-456-78
                    }

                    logo {
                        # get the logo image uri via TS and prepend the baseUrl to get the absolute path
                        url = IMG_RESOURCE
                        url {
                            file = fileadmin/company_logo.
                            stdWrap.wrap = {TSFE:baseUrl}|
                            stdWrap.insertData = 1
                        }
                    }
                    # special datatype from px_semantic EXT to define arrays
                    sameAs = Portrino\PxSemantic\Converter\ArrayConverter
                    sameAs {
                        0 = http://www.facebook.com/foo
                        1 = http://www.youtube.com/user/bar
                        2 = http://www.pinterest.com/fooBar/
                    }
                    # use typolink to generate link to the root page
                    url = TEXT
                    url.typolink {
                        parameter = 1
                        forceAbsoluteUrl = 1
                        returnLast = url
                    }
                }
            }
        }
    }
}

# global extbase settings
config.tx_extbase {
    persistence {
        storagePid = {$plugin.tx_pxsemantic.persistence.storagePid}
        recursive = {$plugin.tx_pxsemantic.persistence.recursive}

        classes {
            Portrino\PxSemantic\Domain\Model\Page {
                mapping {
                    tableName = pages
                    // disable single table inheritance
                    recordType =
                    columns {
                        crdate.mapOnProperty = crdate
                        tstamp.mapOnProperty = tstamp
                        backend_layout.mapOnProperty = backendLayout
                    }
                }
            }
        }
    }
}